from typing import Protocol, Iterable, Sequence, List, Callable, Optional
import numpy as np
from .vector import VectorProtocol
from .index import SearchResultProtocol


class QueryProcessorProtocol(Protocol):
    def insert(self, vector: VectorProtocol) -> None: ...
    def upsert_many(self, vectors: Iterable[VectorProtocol]) -> None: ...
    def find_similar(self, query: np.ndarray, top_k: int, namespace: str = "default", filter: Optional[Callable[[VectorProtocol], bool]] = None, metric: str = "cosine") -> List[SearchResultProtocol]: ...
    def delete(self, ids: Sequence[str], namespace: str = "default") -> None: ...